<% layout('layout.eta', { title: '추가' }) %>

<div class="p-4">
  <!-- Income/Expense 토글 -->
  <div class="flex justify-center mb-6 bg-gray-200 rounded-lg p-1 max-w-xs mx-auto">
    <button id="btnIncome" class="w-1/2 py-2 px-4 rounded-lg bg-blue-500 text-white font-medium focus:outline-none">Income</button>
    <button id="btnExpense" class="w-1/2 py-2 px-4 rounded-lg text-gray-700 font-medium focus:outline-none">Expense</button>
  </div>

  <!-- 입력 폼 -->
  <form id="cashflowForm" class="space-y-4 max-w-md mx-auto">
    <!-- 금액 입력 -->
    <div>
      <label for="amount" class="block text-sm font-medium text-gray-700">금액</label>
      <div class="mt-1 relative rounded-md shadow-sm">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <span class="text-gray-500 sm:text-sm">₩</span>
        </div>
        <input type="number" name="amount" id="amount" class="focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 pr-12 sm:text-sm border-gray-300 rounded-md p-2 border" placeholder="0" required>
      </div>
    </div>

    <!-- 날짜 선택 -->
    <div>
      <label for="date" class="block text-sm font-medium text-gray-700">날짜</label>
      <input type="date" name="date" id="date" class="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md p-2 border" required>
    </div>

    <!-- 카테고리 선택 -->
    <div>
      <label for="category" class="block text-sm font-medium text-gray-700">카테고리</label>
      <select id="category" name="category" class="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" required>
        <option value="" disabled selected>카테고리 선택</option>
      </select>
    </div>

    <!-- 메모 입력 -->
    <div>
      <label for="memo" class="block text-sm font-medium text-gray-700">메모</label>
      <textarea id="memo" name="memo" rows="3" class="shadow-sm focus:ring-blue-500 focus:border-blue-500 mt-1 block w-full sm:text-sm border border-gray-300 rounded-md p-2"></textarea>
    </div>
  </form>

  <!-- 저장 버튼 -->
  <div class="fixed bottom-6 left-0 right-0 flex justify-center">
    <button id="btnSave" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-12 rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
      SAVE
    </button>
  </div>
</div>

<script>
  // 카테고리 데이터 정의
  const categoryData = {
    income: [
      { value: 'salary', label: '급여' },
      { value: 'investment', label: '투자' },
      { value: 'side-income', label: '부수입' },
      { value: 'other-income', label: '기타' }
    ],
    expense: [
      { value: 'food', label: '식비' },
      { value: 'transportation', label: '교통비' },
      { value: 'shopping', label: '쇼핑' },
      { value: 'housing', label: '주거/통신' },
      { value: 'entertainment', label: '문화/여가' },
      { value: 'other-expense', label: '기타' }
    ]
  };

  // Transaction type state variable
  let transactionType = 'income'; // default to income
  
  // UI 요소 참조
  const btnIncome = document.getElementById('btnIncome');
  const btnExpense = document.getElementById('btnExpense');
  const categorySelect = document.getElementById('category');
  const amountLabel = document.querySelector('label[for="amount"]');
  
  // 카테고리 선택 업데이트 함수
  function updateCategoryOptions(type) {
    // 기존 옵션 제거
    categorySelect.innerHTML = '';
    
    // 기본 옵션 추가
    const defaultOption = document.createElement('option');
    defaultOption.value = '';
    defaultOption.disabled = true;
    defaultOption.selected = true;
    defaultOption.textContent = '카테고리 선택';
    categorySelect.appendChild(defaultOption);
    
    // 선택된 타입에 맞는 카테고리 옵션 추가
    categoryData[type].forEach(category => {
      const option = document.createElement('option');
      option.value = category.value;
      option.textContent = category.label;
      categorySelect.appendChild(option);
    });
  }
  
  // UI 스타일 업데이트 함수
  function updateUIStyle(type) {
    if (type === 'income') {
      // Income 선택 시 UI 요소 스타일 변경
      amountLabel.textContent = '수입 금액';
      document.getElementById('amount').placeholder = '수입 금액 입력';
      document.getElementById('amount').classList.add('income-field');
      document.getElementById('amount').classList.remove('expense-field');
    } else {
      // Expense 선택 시 UI 요소 스타일 변경
      amountLabel.textContent = '지출 금액';
      document.getElementById('amount').placeholder = '지출 금액 입력';
      document.getElementById('amount').classList.add('expense-field');
      document.getElementById('amount').classList.remove('income-field');
    }
  }
  
  // 거래 타입 토글 함수
  function toggleTransactionType(type) {
    transactionType = type;
    
    if (type === 'income') {
      // Income 버튼 활성화, Expense 버튼 비활성화
      btnIncome.classList.add('bg-blue-500', 'text-white');
      btnIncome.classList.remove('text-gray-700');
      btnExpense.classList.remove('bg-blue-500', 'text-white');
      btnExpense.classList.add('text-gray-700');
    } else {
      // Expense 버튼 활성화, Income 버튼 비활성화
      btnExpense.classList.add('bg-blue-500', 'text-white');
      btnExpense.classList.remove('text-gray-700');
      btnIncome.classList.remove('bg-blue-500', 'text-white');
      btnIncome.classList.add('text-gray-700');
    }
    
    // 카테고리 옵션 및 UI 스타일 업데이트
    updateCategoryOptions(type);
    updateUIStyle(type);
  }
  
  // Income 버튼 클릭 이벤트
  btnIncome.addEventListener('click', () => {
    toggleTransactionType('income');
  });
  
  // Expense 버튼 클릭 이벤트
  btnExpense.addEventListener('click', () => {
    toggleTransactionType('expense');
  });
  
  // Form validation
  function validateForm() {
    const amount = document.getElementById('amount').value;
    const date = document.getElementById('date').value;
    const category = document.getElementById('category').value;
    
    if (!amount || amount <= 0) {
      alert('금액을 올바르게 입력해주세요.');
      return false;
    }
    
    if (!date) {
      alert('날짜를 선택해주세요.');
      return false;
    }
    
    if (!category) {
      alert('카테고리를 선택해주세요.');
      return false;
    }
    
    return true;
  }
  
  // 저장 버튼 기능
  const btnSave = document.getElementById('btnSave');
  btnSave.addEventListener('click', () => {
    if (!validateForm()) return;
    
    // Get form values
    const amount = document.getElementById('amount').value;
    const date = document.getElementById('date').value;
    const category = document.getElementById('category').value;
    const memo = document.getElementById('memo').value;
    
    // Create transaction object
    const transaction = {
      id: Date.now().toString(),
      type: transactionType,
      amount: parseFloat(amount),
      date: date,
      category: category,
      memo: memo,
      createdAt: new Date().toISOString()
    };
    
    // Save using CashflowApp from main.js
    CashflowApp.addTransaction(transaction);
    
    // Show feedback
    alert('저장되었습니다!');
    window.location.href = '/'; // 메인 화면으로 이동
  });
  
  // 페이지 로드 시 초기화
  document.addEventListener('DOMContentLoaded', () => {
    // 오늘 날짜 설정
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    document.getElementById('date').value = `${year}-${month}-${day}`;
    
    // 초기 카테고리 및 UI 설정
    toggleTransactionType('income');
  });
</script>